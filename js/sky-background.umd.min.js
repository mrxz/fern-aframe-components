!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";AFRAME.registerShader("sky-background",{schema:{topColor:{type:"color",is:"uniform",default:"#0077ff"},bottomColor:{type:"color",is:"uniform",default:"#ffffff"},offset:{type:"float",is:"uniform",default:120},exponent:{type:"float",is:"uniform",default:.9},src:{type:"map"}},vertexShader:"\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv*2.0;\n    gl_Position = vec4(position.xy, 1.0, 1.0);\n}\n",fragmentShader:"\nuniform vec3 topColor;\nuniform vec3 bottomColor;\nuniform float offset;\nuniform float exponent;\nuniform sampler2D map;\n\nuniform mat4 cameraWorldMatrix;\nuniform mat4 invProjectionMatrix;\n\nvarying vec2 vUv;\n\n#include <common>\n#include <dithering_pars_fragment>\n\nvoid main() {\n    vec2 ndc = 2.0 * vUv - vec2(1.0);\n    // Convert ndc to ray origin\n    vec4 rayOrigin4 = cameraWorldMatrix * invProjectionMatrix * vec4( ndc, - 1.0, 1.0 );\n    vec3 rayOrigin = rayOrigin4.xyz / rayOrigin4.w;\n    // Compute ray direction\n    vec3 rayDirection = normalize( mat3(cameraWorldMatrix) * ( invProjectionMatrix * vec4( ndc, 0.0, 1.0 ) ).xyz );\n\n    #ifdef USE_MAP\n        gl_FragColor = vec4(texture(map, equirectUv(rayDirection)).rgb, 1.0);\n    #else\n        float h = normalize((rayOrigin + rayDirection * 500.0) + offset).y;\n        gl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h, 0.0 ), exponent), 0.0)), 1.0);\n    #endif\n\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <dithering_fragment>\n}",init:function(e){+AFRAME.THREE.REVISION<158&&(this.fragmentShader=this.fragmentShader.replace(/colorspace_fragment/,"encodings_fragment")),this.__proto__.__proto__.init.call(this,e),this.material.uniforms.map={value:null},this.el.addEventListener("materialtextureloaded",(e=>{e.detail.texture.generateMipmaps=!1,this.material.uniforms.map.value=e.detail.texture}))},update:function(e){this.__proto__.__proto__.update.call(this,e),AFRAME.utils.material.updateMap(this,e)}}),AFRAME.registerComponent("sky-background",{init:function(){const e=this.el.getObject3D("mesh");e.frustumCulled=!1,e.material.uniforms.cameraWorldMatrix={value:new THREE.Matrix4},e.material.uniforms.invProjectionMatrix={value:new THREE.Matrix4},e.onBeforeRender=(e,r,n,t,i,o)=>{i.uniforms.cameraWorldMatrix.value.copy(n.matrixWorld),i.uniforms.cameraWorldMatrix.needsUpdate=!0,i.uniforms.invProjectionMatrix.value.copy(n.projectionMatrix).invert(),i.uniforms.invProjectionMatrix.needsUpdate=!0}}}),AFRAME.registerPrimitive("a-sky-background",{defaultComponents:{geometry:{primitive:"triangle",vertexA:{x:-1,y:-1,z:0},vertexB:{x:3,y:-1,z:0},vertexC:{x:-1,y:3,z:0}},material:{shader:"sky-background"},"sky-background":{}},mappings:{"top-color":"material.topColor","bottom-color":"material.bottomColor",offset:"material.offset",exponent:"material.exponent",src:"material.src"}})}));
